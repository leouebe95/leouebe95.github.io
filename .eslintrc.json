{
    "env": {
        "browser": true,
        "amd": true
    },
    "parserOptions": {
        "ecmaVersion": 6
    },
    "globals": {
    },

    // Reference: http://eslint.org/docs/rules/
    // "off" or 0 - turn the rule off
    // "warn" or 1 - turn the rule on as a warning (doesn't affect exit code)
    // "error" or 2 - turn the rule on as an error (exit code is 1 when triggered)
    //
    "rules": {
        //
        // Possible Errors
        //

        "no-await-in-loop": 0, // disallow await inside of loops
        "no-compare-neg-zero": 2,  // disallow comparing against -0
        "no-cond-assign": [  // disallow assignment operators in conditional expressions
            2,
            "except-parens"  // Except if they are enclosed in parentheses
        ],
        "no-console": 1, // disallow the use of console
        "no-constant-condition": 1, // disallow constant expressions in conditions
        "no-control-regex": 1, // disallow control characters in regular expressions
        "no-debugger": 2, // disallow the use of debugger
        "no-dupe-args": 2, // disallow duplicate arguments in function definitions
        "no-dupe-keys": 2, // disallow duplicate keys in object literals
        "no-duplicate-case": 2, // disallow duplicate case labels
        "no-empty": 2, // disallow empty block statements
        "no-empty-character-class": 2, // disallow empty character classes in regular expressions
        "no-ex-assign": 2, // disallow reassigning exceptions in catch clauses
        "no-extra-boolean-cast": 2, // disallow unnecessary boolean casts
        "no-extra-parens": 0, // disallow unnecessary parentheses
        "no-extra-semi": 2, // disallow unnecessary semicolons
        "no-func-assign": 2, // disallow reassigning function declarations
        "no-inner-declarations": 0, // disallow variable or function declarations in nested blocks
        "no-invalid-regexp": 2, // disallow invalid regular expression strings in RegExp constructors
        "no-irregular-whitespace": 1, // disallow irregular whitespace outside of strings and comments
        "no-obj-calls": 2, // disallow calling global object properties as functions
        "no-prototype-builtins": 0, // disallow calling some Object.prototype methods directly on objects
        "no-regex-spaces": 2, // disallow multiple spaces in regular expressions
        "no-sparse-arrays": 2, // disallow sparse arrays
        "no-template-curly-in-string": 1, // disallow template literal placeholder syntax in regular strings
        "no-unexpected-multiline": 2, // disallow confusing multiline expressions
        "no-unreachable": 2, // disallow unreachable code after return, throw, continue, and break statements
        "no-unsafe-finally": 2, // disallow control flow statements in finally blocks
        "no-unsafe-negation": 2, // disallow negating the left operand of relational operators
        "use-isnan": 1, // require calls to isNaN() when checking for NaN
        "valid-jsdoc": [ // enforce valid JSDoc comments
            2,
            {"requireReturn": false} // enforce @return only if function returns a value
        ],
        "valid-typeof": 2, // enforce comparing typeof expressions against valid strings

        //
        // Best Practices
        //
        "accessor-pairs": 1, // enforce getter and setter pairs in objects
        "array-callback-return": 2, // enforce return statements in callbacks of array methods
        "block-scoped-var": 1, // enforce the use of variables within the scope they are defined
        "class-methods-use-this": 1, // enforce that class methods utilize this
        "complexity": 2, // enforce a maximum cyclomatic complexity allowed in a program
        "consistent-return": 2, // require return statements to either always or never specify values
        "curly": 2, // enforce consistent brace style for all control statements
        "default-case": 1, // require default cases in switch statements
        "dot-location": [ // enforce consistent newlines before and after dots
            1,
            "object"
        ],
        "dot-notation": 2, // enforce dot notation whenever possible
        "eqeqeq": 2, // require the use of === and !==
        "guard-for-in": 0, // require for-in loops to include an if statement
        "no-alert": 2, // disallow the use of alert, confirm, and prompt
        "no-caller": 2, // disallow the use of arguments.caller or arguments.callee
        "no-case-declarations": 2, // disallow lexical declarations in case clauses
        "no-div-regex": 0, // disallow division operators explicitly at the beginning of regular expressions
        "no-else-return": 0, // disallow else blocks after return statements in if statements
        "no-empty-function": 0, // disallow empty functions
        "no-empty-pattern": 2, // disallow empty destructuring patterns
        "no-eq-null": 2, // disallow null comparisons without type-checking operators
        "no-eval": 0, // disallow the use of eval()
        "no-extend-native": 0, // disallow extending native types
        "no-extra-bind": 2, // disallow unnecessary calls to .bind()
        "no-extra-label": 2, // disallow unnecessary labels
        "no-fallthrough": 0, // disallow fallthrough of case statements
        "no-floating-decimal": 0, // disallow leading or trailing decimal points in numeric literals
        "no-global-assign": 2, // disallow assignments to native objects or read-only global variables
        "no-implicit-coercion": 0, // disallow shorthand type conversions
        "no-implicit-globals": 0, // disallow variable and function declarations in the global scope
        "no-implied-eval": 2, // disallow the use of eval()-like methods
        "no-invalid-this": 0, // disallow this keywords outside of classes or class-like objects
        "no-iterator": 0, // disallow the use of the __iterator__ property
        "no-labels": 0, // disallow labeled statements
        "no-lone-blocks": 2, // disallow unnecessary nested blocks
        "no-loop-func": 2, // disallow function declarations and expressions inside loop statements
        "no-magic-numbers": 0, // disallow magic numbers
        "no-multi-spaces": 0, // disallow multiple spaces
        "no-multi-str": 0, // disallow multiline strings
        "no-new": 2, // disallow new operators outside of assignments or comparisons
        "no-new-func": 2, // disallow new operators with the Function object
        "no-new-wrappers": 2, // disallow new operators with the String, Number, and Boolean objects
        "no-octal": 2, // disallow octal literals
        "no-octal-escape": 2, // disallow octal escape sequences in string literals
        "no-param-reassign": 0, // disallow reassigning function parameters
        "no-proto": 0, // disallow the use of the __proto__ property
        "no-redeclare": 2, // disallow variable redeclaration
        "no-restricted-properties": 0, // disallow certain properties on certain objects
        "no-return-assign": 2, // disallow assignment operators in return statements
        "no-return-await": 2, // disallow unnecessary return await
        "no-script-url": 0, // disallow javascript: urls
        "no-self-assign": 2, // disallow assignments where both sides are exactly the same
        "no-self-compare": 2, // disallow comparisons where both sides are exactly the same
        "no-sequences": 0, // disallow comma operators
        "no-throw-literal": 0, // disallow throwing literals as exceptions
        "no-unmodified-loop-condition": 2, // disallow unmodified loop conditions
        "no-unused-expressions": 2, // disallow unused expressions
        "no-unused-labels": 2, // disallow unused labels
        "no-useless-call": 2, // disallow unnecessary calls to .call() and .apply()
        "no-useless-concat": 0, // disallow unnecessary concatenation of literals or template literals
        "no-useless-escape": 2, // disallow unnecessary escape characters
        "no-useless-return": 2, // disallow redundant return statements
        "no-void": 2, // disallow void operators
        "no-warning-comments": [ // disallow specified warning terms in comments
            1,
            // Report all FIXME and TODO comments as wanings
            {"terms": ["todo", "fixme"], "location": "start"}
        ],
        "no-with": 0, // disallow with statements
        "prefer-promise-reject-errors": 0, // require using Error objects as Promise rejection reasons
        "radix": 0, // enforce the consistent use of the radix argument when using parseInt()
        "require-await": 0, // disallow async functions which have no await expression
        "vars-on-top": 0, // require var declarations be placed at the top of their containing scope
        "wrap-iife": [ // require parentheses around immediate function invocations
            2,
            "any"
        ],
        "yoda": 0, // require or disallow "Yoda" conditions

        //
        // Strict Mode
        //
        "strict": [ // require or disallow strict mode directives
            2,
            "safe"
        ],

        //
        // Variables
        //
        "init-declarations": 0, // require or disallow initialization in variable declarations
        "no-catch-shadow": 0, // disallow catch clause parameters from shadowing variables in the outer scope
        "no-delete-var": 2, // disallow deleting variables
        "no-label-var": 2, // disallow labels that share a name with a variable
        "no-restricted-globals": 0, // disallow specified global variables
        "no-shadow": 0, // disallow variable declarations from shadowing variables declared in the outer scope
        "no-shadow-restricted-names": 0, // disallow identifiers from shadowing restricted names
        "no-undef": 2, // disallow the use of undeclared variables unless mentioned in /*global */ comments
        "no-undef-init": 0, // disallow initializing variables to undefined
        "no-undefined": 2, // disallow the use of undefined as an identifier
        "no-unused-vars": [ // disallow unused variables
            2,
            { "args": "after-used" }
        ],
        "no-use-before-define": 2, // disallow the use of variables before they are defined

        //
        // Stylistic Issues
        //

        "array-bracket-spacing": 0, // enforce consistent spacing inside array brackets
        "block-spacing": 0, // enforce consistent spacing inside single-line blocks
        "brace-style": 0, // enforce consistent brace style for blocks
        "camelcase": 0, // enforce camelcase naming convention
        "capitalized-comments": 0, // enforce or disallow capitalization of the first letter of a comment
        "comma-dangle": [ // require or disallow trailing commas
            2,
            "never"
        ],
        "comma-spacing": [ // enforce consistent spacing before and after commas
            2,
            { "before": false, "after": true }
        ],
        "comma-style": [ // enforce consistent comma style
            2,
            "last"
        ],

        "computed-property-spacing": 0, // enforce consistent spacing inside computed property brackets
        "consistent-this": 0, // enforce consistent naming when capturing the current execution context
        "eol-last":  2, // require or disallow newline at the end of files
        "func-call-spacing": 0, // require or disallow spacing between function identifiers and their invocations
        "func-name-matching": 0, // require function names to match the name of the variable or property to which they are assigned
        "func-names": 0, // require or disallow named function expressions
        "func-style": 0, // enforce the consistent use of either function declarations or expressions
        "id-blacklist": 0, // disallow specified identifiers
        "id-length": 0, // enforce minimum and maximum identifier lengths
        "id-match": 0, // require identifiers to match a specified regular expression
        "indent": 0, // enforce consistent indentation
        "jsx-quotes": 0, // enforce the consistent use of either double or single quotes in JSX attributes
        "key-spacing": 0, // enforce consistent spacing between keys and values in object literal properties
        "keyword-spacing": 0, // enforce consistent spacing before and after keywords
        "line-comment-position": 0, // enforce position of line comments
        "linebreak-style": 0, // enforce consistent linebreak style
        "lines-around-comment": 0, // require empty lines around comments
        "lines-around-directive": 0, // require or disallow newlines around directives
        "max-depth": 0, // enforce a maximum depth that blocks can be nested
        "max-len": 0, // enforce a maximum line length
        "max-lines": 0, // enforce a maximum number of lines per file
        "max-nested-callbacks": 0, // enforce a maximum depth that callbacks can be nested
        "max-params": 0, // enforce a maximum number of parameters in function definitions
        "max-statements": 0, // enforce a maximum number of statements allowed in function blocks
        "max-statements-per-line": 0, // enforce a maximum number of statements allowed per line
        "multiline-ternary": 0, // enforce newlines between operands of ternary expressions
        "new-cap": [ // require constructor names to begin with a capital letter
            2,
            { "properties": false }
        ],
        "new-parens": 0, // require parentheses when invoking a constructor with no arguments
        "newline-after-var": 0, // require or disallow an empty line after variable declarations
        "newline-before-return": 0, // require an empty line before return statements
        "newline-per-chained-call": 0, // require a newline after each call in a method chain
        "no-array-constructor": 2, // disallow Array constructors
        "no-bitwise": 2, // disallow bitwise operators
        "no-continue": 0, // disallow continue statements
        "no-inline-comments": 0, // disallow inline comments after code
        "no-lonely-if": 0, // disallow if statements as the only statement in else blocks
        "no-mixed-operators": [ // disallow mixed binary operators
            2,
            {
            "groups": [
                ["+", "-"],
                ["*", "/", "%", "**"],
                ["&", "|", "^", "~", "<<", ">>", ">>>"],
                ["==", "!=", "===", "!==", ">", ">=", "<", "<="],
                ["&&", "||"],
                ["in", "instanceof"]
            ],
            "allowSamePrecedence": false
        }
        ],
        "no-mixed-spaces-and-tabs": 0, // disallow mixed spaces and tabs for indentation
        "no-multi-assign": 0, // disallow use of chained assignment expressions
        "no-multiple-empty-lines": 0, // disallow multiple empty lines
        "no-negated-condition": 0, // disallow negated conditions
        "no-nested-ternary": 0, // disallow nested ternary expressions
        "no-new-object": 0, // disallow Object constructors
        "no-plusplus": 0, // disallow the unary operators ++ and --
        "no-restricted-syntax": 0, // disallow specified syntax
        "no-tabs": 0, // disallow all tabs
        "no-ternary": 0, // disallow ternary operators
        "no-trailing-spaces": 0, // disallow trailing whitespace at the end of lines
        "no-underscore-dangle": 0, // disallow dangling underscores in identifiers
        "no-unneeded-ternary": 2, // disallow ternary operators when simpler alternatives exist
        "no-whitespace-before-property": 0, // disallow whitespace before properties
        "nonblock-statement-body-position": 0, // enforce the location of single-line statements
        "object-curly-newline": 0, // enforce consistent line breaks inside braces
        "object-curly-spacing": 0, // enforce consistent spacing inside braces
        "object-property-newline": 0, // enforce placing object properties on separate lines
        "one-var": 0, // enforce variables to be declared either together or separately in functions
        "one-var-declaration-per-line": 0, // require or disallow newlines around variable declarations
        "operator-assignment": 0, // require or disallow assignment operator shorthand where possible
        "operator-linebreak": 0, // enforce consistent linebreak style for operators
        "padded-blocks": 0, // require or disallow padding within blocks
        "quote-props": 0, // require quotes around object literal property names
        "quotes": [ // enforce the consistent use of either backticks, double, or single quotes
            2,
            "single",
            { "avoidEscape": true }
        ],
        "require-jsdoc": 2, // require JSDoc comments
        "semi": [ // require or disallow semicolons instead of ASI
            2,
            "always"
        ],

        "semi-spacing": 0, // enforce consistent spacing before and after semicolons
        "sort-keys": 0, // require object keys to be sorted
        "sort-vars": 0, // require variables within the same declaration block to be sorted
        "space-before-blocks": 0, // enforce consistent spacing before blocks
        "space-before-function-paren": 0, // enforce consistent spacing before function definition opening parenthesis
        "space-in-parens": 0, // enforce consistent spacing inside parentheses
        "space-infix-ops": 0, // require spacing around infix operators
        "space-unary-ops": 0, // enforce consistent spacing before or after unary operators
        "spaced-comment": 0, // enforce consistent spacing after the //  or /* in a comment
        "template-tag-spacing": 0, // require or disallow spacing between template tags and their literals
        "unicode-bom": 0, // require or disallow Unicode byte order mark (BOM)
        "wrap-regex": 0 // require parenthesis around regex literals
    }
}
